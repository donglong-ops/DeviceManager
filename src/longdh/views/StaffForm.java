/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package longdh.views;

import java.sql.Date;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import longdh.dtos.ReplyDTO;
import longdh.dtos.RequestDTO;
import longdh.daos.AccountDAO;
import longdh.daos.ReplyDAO;
import longdh.daos.RequestDAO;

/**
 *
 * @author donglong
 */
public class StaffForm extends javax.swing.JFrame {

    AccountDAO userDAO = new AccountDAO();
    RequestDAO requestDAO = new RequestDAO();
    ReplyDAO replyDAO = new ReplyDAO();

    /**
     * Creates new form DiviceForm
     */
    public StaffForm() {
        initComponents();
    }

    public StaffForm(String username) throws Exception {
        initComponents();
        lbWelcome.setText(username.toUpperCase());
        loadDataRequest();
        loadDataFixRequest();
    }

    public void loadDataRequest() throws Exception {
        List<RequestDTO> listReq = requestDAO.getAllRequest();
        DefaultTableModel model = (DefaultTableModel) tblRequest.getModel();
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }
        for (RequestDTO dto : listReq) {
            model.addRow(dto.toVector());
        }
    }

    public void loadDataFixRequest() throws Exception {
        List<RequestDTO> listReq = requestDAO.getAllRequestFix();
        DefaultTableModel model = (DefaultTableModel) tblRequest2.getModel();
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }
        for (RequestDTO dto : listReq) {
            model.addRow(dto.toVector());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel17 = new javax.swing.JPanel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        Device = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        txtRequestID = new javax.swing.JTextField();
        txtRequestTime = new javax.swing.JTextField();
        jLabel45 = new javax.swing.JLabel();
        btnRepcall = new javax.swing.JButton();
        txtRequestUser = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtRequestMessage = new javax.swing.JTextArea();
        jLabel21 = new javax.swing.JLabel();
        checkFixed = new javax.swing.JCheckBox();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtRepContent = new javax.swing.JTextArea();
        txtRequestDevice = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        checkDoing = new javax.swing.JCheckBox();
        lbWelcome = new javax.swing.JLabel();
        btnLogOut = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        tabbel = new javax.swing.JTabbedPane();
        jScrollPane8 = new javax.swing.JScrollPane();
        tblRequest = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        tblRequest1 = new javax.swing.JTable();
        jScrollPane10 = new javax.swing.JScrollPane();
        tblRequest2 = new javax.swing.JTable();
        btnClear = new javax.swing.JButton();
        btnHis = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Report Detail's", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        jLabel41.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel41.setText("RequestID:");

        jLabel42.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel42.setText("Time send:");

        Device.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Device.setText("DeviceID:");

        jLabel44.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel44.setText("UserID :");

        jLabel45.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel45.setText("Message:");

        btnRepcall.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnRepcall.setText("SEND REPLY");
        btnRepcall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRepcallActionPerformed(evt);
            }
        });

        txtRequestUser.setEditable(false);

        txtRequestMessage.setEditable(false);
        txtRequestMessage.setColumns(20);
        txtRequestMessage.setRows(5);
        jScrollPane4.setViewportView(txtRequestMessage);

        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel21.setText("Status:");

        checkFixed.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        checkFixed.setText("Fixed");

        txtRepContent.setColumns(20);
        txtRepContent.setRows(5);
        jScrollPane5.setViewportView(txtRepContent);

        txtRequestDevice.setEditable(false);

        jLabel22.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel22.setText("Reply:");

        checkDoing.setText("Doing");

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel17Layout.createSequentialGroup()
                                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel41)
                                    .addComponent(jLabel45)
                                    .addComponent(jLabel22)
                                    .addComponent(jLabel21))
                                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel17Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel17Layout.createSequentialGroup()
                                                .addComponent(checkFixed, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(checkDoing))))
                                    .addGroup(jPanel17Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel17Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtRequestID, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel17Layout.createSequentialGroup()
                                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel42)
                                    .addComponent(Device)
                                    .addComponent(jLabel44))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtRequestUser)
                                    .addComponent(txtRequestDevice)
                                    .addComponent(txtRequestTime))))
                        .addGap(0, 10, Short.MAX_VALUE))
                    .addComponent(btnRepcall, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel41)
                    .addComponent(txtRequestID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel42)
                    .addComponent(txtRequestTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Device)
                    .addComponent(txtRequestDevice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel44)
                    .addComponent(txtRequestUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jLabel45)))
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel22)
                        .addGap(39, 39, 39))
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)))
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(checkFixed)
                    .addComponent(checkDoing))
                .addGap(6, 6, 6)
                .addComponent(btnRepcall))
        );

        lbWelcome.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbWelcome.setForeground(new java.awt.Color(51, 51, 51));

        btnLogOut.setText("LogOut");
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("Welcome");

        tblRequest.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tblRequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "RequestID", "DeviceID", "RoomID", "UserID", "Date", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblRequest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblRequestMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(tblRequest);

        tabbel.addTab("Request", jScrollPane8);

        tblRequest1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tblRequest1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "StaffID ", "ReplyDate", "Message", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblRequest1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblRequest1MouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(tblRequest1);

        tblRequest2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tblRequest2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "RequestID", "DeviceID", "RoomID", "UserID", "Date", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblRequest2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblRequest2MouseClicked(evt);
            }
        });
        jScrollPane10.setViewportView(tblRequest2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 422, Short.MAX_VALUE)
            .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabbel.addTab("History Fix", jPanel1);

        btnClear.setText("Clear and Reload");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnHis.setText("History Of Fix Device");
        btnHis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHisActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 340, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(lbWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(180, 180, 180)
                .addComponent(btnLogOut, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnHis, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tabbel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnLogOut)
                        .addComponent(jLabel1)))
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(25, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tabbel, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(btnHis)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnClear)
                        .addGap(36, 36, 36))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblRequestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRequestMouseClicked
        // TODO add your handling code here:
        int row = tblRequest.getSelectedRow();
        if (row < 0) {
            return;
        }
        String requestID = (String) tblRequest.getValueAt(row, 0);
        RequestDTO dto = null;
        try {
            dto = requestDAO.getRequestByID(requestID);
        } catch (Exception ex) {
            Logger.getLogger(StaffForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        txtRequestID.setText(dto.getId());;
        txtRequestID.setEditable(false);
        txtRequestTime.setText(dto.getDate().toString());
        txtRequestTime.setEditable(false);
        txtRequestMessage.setText(dto.getMessage());
        txtRequestMessage.setEditable(false);
        txtRepContent.setText("");
        txtRequestDevice.setText(dto.getDeviceID());
        txtRequestUser.setText(dto.getUserID());
        btnRepcall.setEnabled(true);
    }//GEN-LAST:event_tblRequestMouseClicked

    private void btnRepcallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRepcallActionPerformed
        if (lbWelcome.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "You Didn't Login Before. Please Login");
            return;
        }
        Random rand = new Random();
        int replyId = rand.nextInt(100000);
        String replyid = (Integer.toString(replyId));
        try {
            if (requestDAO.getRequesByID(replyid) != null) {
                JOptionPane.showMessageDialog(this, "Reply Already");
                return;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        String requestID = txtRequestID.getText().trim();
        RequestDTO listInfo = null;
        try {
            listInfo = replyDAO.getInfoOfReq(requestID);
        } catch (Exception ex) {
            Logger.getLogger(StaffForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        ArrayList list = null;
        try {
            list = userDAO.getUserIDbyUserNames(lbWelcome.getText().trim());
        } catch (Exception ex) {
            Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        String userID = null;
        for (Object list1 : list) {
            userID = list1.toString();
        }
        String staffID = userID;
        String replyMsg = txtRepContent.getText().trim();
        if (txtRepContent.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Reply can't be Blank");
            txtRepContent.requestFocus();
            return;
        }
        LocalDate date = java.time.LocalDate.now();
        Date dateCreate = Date.valueOf(date);
        String status = null;
        if (checkFixed.isSelected() == false && checkDoing.isSelected() == false) {
            JOptionPane.showMessageDialog(this, "You Need Choise One Status");
            return;
        }
        if (checkFixed.isSelected() == true) {
            status = "Fixed";
        }
        if (checkDoing.isSelected() == true) {
            status = "Doing";
        }
        if (checkFixed.isSelected() == true && checkDoing.isSelected() == true) {
            JOptionPane.showMessageDialog(this, "Just Choise One Status");
            return;
        }

        ReplyDTO dto = new ReplyDTO(replyid, staffID, replyMsg, requestID, status, dateCreate);
        int n = JOptionPane.showConfirmDialog(this, "Do you want to Sent Reply?", "Reply", JOptionPane.YES_NO_OPTION);
        if (n != JOptionPane.YES_OPTION) {
            return;
        }
        boolean check = false;
        ReplyDAO dao = new ReplyDAO();
        try {
            check = dao.insertReply(dto);
        } catch (Exception ex) {
            Logger.getLogger(StaffForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (check) {
            try {
                requestDAO.setStatusByID(requestID);
                //update fixcount
                replyDAO.updateFixcount(listInfo.getDeviceID(), listInfo.getRoomID());
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            JOptionPane.showMessageDialog(this, "Reply Success!");
            clear();
            try {
                loadDataFixRequest();
                loadDataRequest();
            } catch (Exception ex) {
                Logger.getLogger(StaffForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Reply Failed!");
        }

    }//GEN-LAST:event_btnRepcallActionPerformed

    public void clear() {
        txtRequestID.setText("");
        txtRequestTime.setText("");
        txtRequestMessage.setText("");
        txtRepContent.setText("");
        txtRequestUser.setText("");
        txtRequestDevice.setText("");
    }

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        // TODO add your handling code here:
        int r = JOptionPane.showConfirmDialog(this, "Are you sure to LogOut ?", "LogOut ?", JOptionPane.YES_NO_OPTION);
        if (r == JOptionPane.YES_OPTION) {
            new LoginForm().setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_btnLogOutActionPerformed

    private void btnHisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHisActionPerformed
        // TODO add your handling code here:
        tabbel.setSelectedIndex(1);
    }//GEN-LAST:event_btnHisActionPerformed

    private void tblRequest1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRequest1MouseClicked
        int row3 = tblRequest1.getSelectedRow();
        if (row3 < 0) {
            return;
        }
        String mesesage = (String) tblRequest1.getValueAt(row3, 2);
        txtRepContent.setText(mesesage);
        btnRepcall.setEnabled(false);
    }//GEN-LAST:event_tblRequest1MouseClicked

    private void tblRequest2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRequest2MouseClicked
        // TODO add your handling code here:
        int row = tblRequest2.getSelectedRow();
        if (row < 0) {
            return;
        }
        String requestID = (String) tblRequest2.getValueAt(row, 0);
        RequestDTO dto = null;
        try {
            dto = requestDAO.getRequestByID(requestID);
        } catch (Exception ex) {
            Logger.getLogger(StaffForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        txtRequestID.setText(dto.getId());;
        txtRequestID.setEditable(false);
        txtRequestTime.setText(dto.getDate().toString());
        txtRequestTime.setEditable(false);
        txtRequestMessage.setText(dto.getMessage());
        txtRequestMessage.setEditable(false);
        txtRepContent.setText("");
        txtRequestDevice.setText(dto.getDeviceID());
        txtRequestUser.setText(dto.getUserID());
//        String requestID = (String) tblRequest2.getValueAt(row, 0);
        try {
            showReply(requestID);
        } catch (Exception ex) {
            Logger.getLogger(StaffForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_tblRequest2MouseClicked

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        txtRequestID.setText("");
        txtRepContent.setText("");
        txtRequestDevice.setText("");
        txtRequestMessage.setText("");
        txtRequestTime.setText("");
        txtRequestUser.setText("");
        if (lbWelcome.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "You Didn't Login Before. Please Login");
        } else {
            try {
                loadDataRequest();
                loadDataFixRequest();
            } catch (Exception ex) {
                Logger.getLogger(StaffForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_btnClearActionPerformed
    private void showReply(String requestId) throws Exception {
        List<ReplyDTO> listRep = replyDAO.getAllReply(requestId);
        DefaultTableModel model = (DefaultTableModel) tblRequest1.getModel();
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }
        for (ReplyDTO dto : listRep) {
            model.addRow(dto.toVector());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StaffForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StaffForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StaffForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StaffForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StaffForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Device;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnHis;
    private javax.swing.JButton btnLogOut;
    private javax.swing.JButton btnRepcall;
    private javax.swing.JCheckBox checkDoing;
    private javax.swing.JCheckBox checkFixed;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLabel lbWelcome;
    private javax.swing.JTabbedPane tabbel;
    private javax.swing.JTable tblRequest;
    private javax.swing.JTable tblRequest1;
    private javax.swing.JTable tblRequest2;
    private javax.swing.JTextArea txtRepContent;
    private javax.swing.JTextField txtRequestDevice;
    private javax.swing.JTextField txtRequestID;
    private javax.swing.JTextArea txtRequestMessage;
    private javax.swing.JTextField txtRequestTime;
    private javax.swing.JTextField txtRequestUser;
    // End of variables declaration//GEN-END:variables
}
