/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package longdh.views;

import java.sql.Date;
import java.time.LocalDate;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import longdh.dtos.DeviceDTO;
import longdh.dtos.RoomDTO;
import longdh.dtos.UserDTO;
import longdh.daos.AccountDAO;
import longdh.daos.DeviceDAO;
import longdh.daos.RoomDAO;
import longdh.daos.RoomUserDAO;

/**
 *
 * @author donglong
 */
public class AdminForm extends javax.swing.JFrame {

    DefaultTableModel tblViewUser = null;
    AccountDAO userDAO = new AccountDAO();
    DeviceDAO deviceDAO = new DeviceDAO();
    RoomDAO roomDAO = new RoomDAO();

    /**
     * Creates new form StaffForm
     */
    public AdminForm() {
        initComponents();
        btnTearchSearch.setEnabled(true);
    }

    public AdminForm(String username) throws Exception {
        initComponents();
        lbwelcome.setText("Welcome Admin " + username.toUpperCase());
        loadAllData();
        loadDataUser();
        loadDataStaff();
        btnDelete.setEnabled(false);
        btnTearchSearch.setEnabled(true);
        loadDevice();
        setRoom();
        txtUSER.setEditable(false);
        btnAddUserRoom.setEnabled(false);
        btnDeviceDelete.setEnabled(false);
    }

    public void loadAllData() throws Exception {
        List<UserDTO> listStudent = userDAO.getAllUsers();
        DefaultTableModel model = (DefaultTableModel) tblAll.getModel();
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }
        for (UserDTO dto : listStudent) {
            model.addRow(dto.toVector());
        }
    }

    public void loadDataUser() throws Exception {
        List<UserDTO> listStudent = userDAO.getAllUsersByRole();
        DefaultTableModel model = (DefaultTableModel) tblUser.getModel();
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }
        for (UserDTO dto : listStudent) {
            model.addRow(dto.toVector());
        }
    }

    public void loadDataStaff() throws Exception {
        List<UserDTO> listStudent = userDAO.getAllStaff();
        DefaultTableModel model = (DefaultTableModel) tblStaff.getModel();
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }
        for (UserDTO dto : listStudent) {
            model.addRow(dto.toVector());
        }
    }

    public void loadDevice() throws Exception {
        List<DeviceDTO> listDevice = deviceDAO.getAllDevice();
        DefaultTableModel model = (DefaultTableModel) tblDevice.getModel();
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }
        for (DeviceDTO deviceDTO : listDevice) {
            model.addRow(deviceDTO.toVector());
        }
    }

    private void setRoom() throws Exception {
        Vector<RoomDTO> listRoom = roomDAO.getAllRoom();
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        for (RoomDTO dto : listRoom) {
            model.addElement(dto.getRoomId());
        }
        cbRoom.setModel(model);
        cbRoom1.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblAll = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblUser = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblStaff = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtUserID = new javax.swing.JTextField();
        txtUsername = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        txtPassword = new javax.swing.JPasswordField();
        btnInsert = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnTearchSearch = new javax.swing.JButton();
        btnTeacherNew = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cbxRole = new javax.swing.JComboBox();
        lbwelcome = new javax.swing.JLabel();
        btnLogOut = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblDevice = new javax.swing.JTable();
        jPanel16 = new javax.swing.JPanel();
        jLabel36 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        txtDeviceID = new javax.swing.JTextField();
        btnDeviceInsert = new javax.swing.JButton();
        btnDeviceUpdate = new javax.swing.JButton();
        btnDeviceDelete = new javax.swing.JButton();
        btnDeviceNew = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        cbxType = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        txtDeviceName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtGuarantee = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDes = new javax.swing.JTextArea();
        cbRoom = new javax.swing.JComboBox<String>();
        txtUSER = new javax.swing.JTextField();
        cbRoom1 = new javax.swing.JComboBox<String>();
        btnAddUserRoom = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        txtFrom = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtTo = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        tblAll.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "UserID", "UserName", "Email", "Phone"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAll.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAllMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblAll);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("All", jPanel2);

        tblUser.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "UserID", "UserName", "Email", "Phone"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblUser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblUserMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblUser);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("User", jPanel1);

        tblStaff.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "UserID", "UserName", "Email", "Phone"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblStaff.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblStaffMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tblStaff);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Staff", jPanel3);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "User Detail's", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N
        jPanel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("ID:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Name:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("Password:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setText("Email:");

        txtUsername.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUsernameKeyPressed(evt);
            }
        });

        txtEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel10.setText("Phone:");

        btnInsert.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnInsert.setText("Insert");
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnTearchSearch.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnTearchSearch.setText("Search");
        btnTearchSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTearchSearchActionPerformed(evt);
            }
        });

        btnTeacherNew.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnTeacherNew.setText("Clear");
        btnTeacherNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTeacherNewActionPerformed(evt);
            }
        });

        jLabel1.setText("Role:");

        cbxRole.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choice RoLe", "User", "Staff" }));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(btnInsert)
                        .addGap(39, 39, 39)
                        .addComponent(btnUpdate)
                        .addGap(30, 30, 30)
                        .addComponent(btnDelete))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtPhone)
                            .addComponent(txtEmail, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPassword, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtUserID, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtUsername, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbxRole, 0, 112, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnTeacherNew, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnTearchSearch))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUserID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(0, 0, 0)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTearchSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(btnTeacherNew)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbxRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInsert)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addContainerGap())
        );

        lbwelcome.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbwelcome.setForeground(new java.awt.Color(255, 0, 0));

        btnLogOut.setText("LogOut");
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });

        tblDevice.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "DeviceID", "DiviceName", "Type", "RoomID", "FixCount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDevice.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDeviceMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(tblDevice);

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder("Device Detail's"));

        jLabel36.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel36.setText("ID:");

        jLabel38.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel38.setText("Type:");

        jLabel39.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel39.setText("RoomID");

        btnDeviceInsert.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnDeviceInsert.setText("Insert");
        btnDeviceInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeviceInsertActionPerformed(evt);
            }
        });

        btnDeviceUpdate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnDeviceUpdate.setText("Update");
        btnDeviceUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeviceUpdateActionPerformed(evt);
            }
        });

        btnDeviceDelete.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnDeviceDelete.setText("Delete");
        btnDeviceDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeviceDeleteActionPerformed(evt);
            }
        });

        btnDeviceNew.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnDeviceNew.setText("Clear");
        btnDeviceNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeviceNewActionPerformed(evt);
            }
        });

        jButton1.setText("History Of Fix Device");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        cbxType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choice Type", "Lights", "Television", "PC", "Table", "Fan", "Electric", "Air Condition", "Chair", "Fridge" }));

        jLabel2.setText("Name:");

        jLabel3.setText("Description");

        jLabel5.setText("Guarantee");

        txtDes.setColumns(20);
        txtDes.setRows(5);
        jScrollPane1.setViewportView(txtDes);

        cbRoom.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "RoomID", "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel36)
                    .addComponent(jLabel39)
                    .addComponent(jLabel38)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtDeviceName, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbRoom, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbxType, javax.swing.GroupLayout.Alignment.LEADING, 0, 147, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(txtGuarantee)
                    .addComponent(txtDeviceID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDeviceInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeviceNew, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeviceUpdate)
                    .addComponent(btnDeviceDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(txtDeviceID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeviceNew))
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtDeviceName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel39)
                            .addComponent(cbRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel38)
                            .addComponent(cbxType, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel16Layout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addComponent(jLabel3))
                            .addGroup(jPanel16Layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtGuarantee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDeviceInsert)
                        .addGap(31, 31, 31)
                        .addComponent(btnDeviceUpdate)
                        .addGap(43, 43, 43)
                        .addComponent(btnDeviceDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jButton1)
                .addGap(4, 4, 4))
        );

        txtUSER.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUSERKeyPressed(evt);
            }
        });

        cbRoom1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "RoomID", "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnAddUserRoom.setText("Add UserRoom");
        btnAddUserRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddUserRoomActionPerformed(evt);
            }
        });

        jLabel4.setText("UserID ");

        jButton3.setText("ShowRoom");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel11.setText("To");

        jButton2.setText("Search");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel12.setText("From");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbwelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(211, 211, 211)
                .addComponent(btnLogOut, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtFrom)
                                    .addComponent(txtUSER, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cbRoom1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnAddUserRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtTo, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton2)))))
                        .addGap(20, 20, 20))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(btnLogOut))
                    .addComponent(lbwelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtUSER, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbRoom1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAddUserRoom)
                            .addComponent(jButton3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(txtTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2)
                            .addComponent(jLabel12))
                        .addGap(7, 7, 7)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
        if (lbwelcome.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "You Didn't Login Before. Please Login");
            return;
        }
        String id = txtUserID.getText().trim();
        if (id.isEmpty()) {
            JOptionPane.showMessageDialog(this, "ID must be required!");
            return;
        }
        try {
            if (userDAO.getUserByID(id) != null) {
                JOptionPane.showMessageDialog(this, "UserID Existed");
                return;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        String name = txtUsername.getText().trim();
        if (!name.matches("[A-Za-z0-9]{3,30}")) {
            JOptionPane.showMessageDialog(null, "User Name has Max Length 30 !!!");
            return;
        }
        String password = new String(txtPassword.getPassword());
        if (!password.matches("[A-Za-z0-9]{1,10}")) {
            JOptionPane.showMessageDialog(this, "Password has Max Length 10 !!!");
            return;
        }
        String email = txtEmail.getText().trim();
        if (!email.matches("[A-Za-z0-9@.]{1,30}")) {
            JOptionPane.showMessageDialog(this, "Email must be valid!");
            return;
        }
        String phone = txtPhone.getText().trim();
        if (!phone.matches("[0-9]{1,10}")) {
            JOptionPane.showMessageDialog(this, "Phone must be number!");
            return;
        }
        String role = "";
        int selectPersent = cbxRole.getSelectedIndex();
        switch (selectPersent) {
            case 1:
                role = "User";
                break;
            case 2:
                role = "Staff";
                break;
        }
        UserDTO dto = new UserDTO(id, name, role, password, email, phone);
        int n = JOptionPane.showConfirmDialog(this, "Do you want to insert User?", "Insert", JOptionPane.YES_NO_OPTION);
        if (n != JOptionPane.YES_OPTION) {
            return;
        }
        boolean check = false;
        try {
            check = userDAO.insertUser(dto);
        } catch (Exception ex) {
            Logger.getLogger(AdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (check) {
            JOptionPane.showMessageDialog(this, "Insert Success");
            try {
                clear();
                loadAllData();
                loadDataUser();
                loadDataStaff();
            } catch (Exception ex) {
                Logger.getLogger(AdminForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Insert Failed");
        }
    }//GEN-LAST:event_btnInsertActionPerformed
    public void clear() {
        txtUserID.setText("");
        txtUsername.setText("");
        txtEmail.setText("");
        txtPhone.setText("");
        txtPassword.setText("");
    }

    public void clearDevice() {
        txtDeviceID.setText("");
        txtDeviceName.setText("");
        txtGuarantee.setText("");
        txtDes.setText("");
        cbRoom.setSelectedIndex(0);
        cbxType.setSelectedIndex(0);
    }
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (lbwelcome.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "You Didn't Login Before. Please Login");
            return;
        }
        String id = txtUserID.getText().trim();
        if (id.isEmpty()) {
            JOptionPane.showMessageDialog(this, "ID must be required!");
            return;
        }
        String name = txtUsername.getText().trim();
        if (!name.matches("[A-Za-z0-9]{3,30}")) {
            JOptionPane.showMessageDialog(null, "User Name has Max Length 30 !!!");
            return;
        }
        String password = new String(txtPassword.getPassword());
        String email = txtEmail.getText().trim();
        if (!email.matches("[A-Za-z0-9@.]{1,30}")) {
            JOptionPane.showMessageDialog(this, "Email must be valid!");
            return;
        }
        String phone = txtPhone.getText().trim();
        if (!phone.matches("[0-9]{1,10}")) {
            JOptionPane.showMessageDialog(this, "Phone must be number!");
            return;
        }
        UserDTO dto = new UserDTO(id, name, "User", password, email, phone);
        int n = JOptionPane.showConfirmDialog(this, "Do you want to update User-" + id + "?", "Update", JOptionPane.YES_NO_OPTION);
        if (n != JOptionPane.YES_OPTION) {
            return;
        }
        boolean check = false;
        try {
            check = userDAO.updateUser(dto);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        if (check) {
            if (check) {
                JOptionPane.showMessageDialog(this, "Update Success");
                try {
                    clear();
                    loadAllData();
                    loadDataUser();
                    loadDataStaff();

                } catch (Exception ex) {
                    Logger.getLogger(AdminForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Update Failed");
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        if (lbwelcome.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "You Didn't Login Before. Please Login");
            return;
        }
        String id = txtUserID.getText().trim();
        if (id.isEmpty()) {
            JOptionPane.showMessageDialog(this, "UserID must be required!");
            return;
        }
        int n = JOptionPane.showConfirmDialog(this, "Do you want to delete UserID -" + id + "?", "Delete", JOptionPane.YES_NO_OPTION);
        if (n != JOptionPane.YES_OPTION) {
            return;
        }
        boolean check = false;
        try {
            check = userDAO.deleteUserByID(id);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        if (check) {
            if (check) {
                JOptionPane.showMessageDialog(this, "Delete UserID- " + id + " Success");
                try {
                    clear();
                    loadAllData();
                    loadDataUser();
                    loadDataStaff();
                } catch (Exception ex) {
                    Logger.getLogger(AdminForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Delete UserID- " + id + " Success");
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnTearchSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTearchSearchActionPerformed
        if (!txtUsername.getText().isEmpty()) {
            String nameSearch = txtUsername.getText().trim();
            if (nameSearch.isEmpty()) {
                JOptionPane.showMessageDialog(this, "UserName must be required!");
                return;
            }
            DefaultTableModel model = (DefaultTableModel) tblAll.getModel();
            List<UserDTO> listAll = null;
            try {
                listAll = userDAO.findUserByID(nameSearch);
            } catch (Exception ex) {
                Logger.getLogger(AdminForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            while (model.getRowCount() > 0) {
                model.removeRow(0);
            }
            for (UserDTO userDTO : listAll) {
                model.addRow(userDTO.toVector());
            }
            tblAll.updateUI();
        }
    }//GEN-LAST:event_btnTearchSearchActionPerformed

    private void btnTeacherNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTeacherNewActionPerformed
        // TODO add your handling code here:
        txtUserID.setText("");
        txtUsername.setText("");
        txtEmail.setText("");
        txtPhone.setText("");
        txtPassword.setText("");
        btnDelete.setEnabled(false);
        try {
            loadAllData();
            loadDataUser();
            loadDataStaff();
        } catch (Exception ex) {
            Logger.getLogger(AdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnTeacherNewActionPerformed

    private void txtEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmailActionPerformed

    private void tblDeviceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDeviceMouseClicked
        // TODO add your handling code here:
        int row = tblDevice.getSelectedRow();
        if (row < 0) {
            return;
        }
        String deviceID = (String) tblDevice.getValueAt(row, 0);
        DeviceDTO dto = null;
        try {
            dto = deviceDAO.getDeviceByID(deviceID);
        } catch (Exception ex) {
            Logger.getLogger(AdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        txtDeviceID.setText(dto.getDeviceID());
        txtDeviceName.setText(dto.getDeviceName());
        txtGuarantee.setText(dto.getGuarantee());
        txtDes.setText(dto.getDescription());
        txtDeviceID.setText(dto.getDeviceID());
        String roomid = dto.getRoomID();
        for (int i = 0; i < cbRoom.getItemCount(); i++) {
            String roomId = (String) cbRoom.getItemAt(i);
            if (roomId.equals(roomid)) {
                cbRoom.setSelectedIndex(i);
            }
        }
        String type = dto.getType();
        for (int i = 0; i < cbxType.getItemCount(); i++) {
            String cbValue = (String) cbxType.getItemAt(i);
            if (cbValue.equals(type)) {
                cbxType.setSelectedIndex(i);
            }
        }
        btnDeviceDelete.setEnabled(true);

    }//GEN-LAST:event_tblDeviceMouseClicked

    private void tblUserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblUserMouseClicked
        int row = tblUser.getSelectedRow();
        if (row < 0) {
            return;
        }
        String id = (String) tblUser.getValueAt(row, 0);
        UserDTO dto = null;
        try {
            dto = userDAO.getUserByID(id);
        } catch (Exception ex) {
            Logger.getLogger(AdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        txtUserID.setText(dto.getId());
        txtUSER.setText(dto.getId());
        txtUsername.setText(dto.getName());
        txtEmail.setText(dto.getEmail());
        txtPhone.setText(dto.getPhone());
        txtPassword.setText("*****");
        String area = dto.getRole();
        for (int i = 0; i < cbxRole.getItemCount(); i++) {
            String cbValue = (String) cbxRole.getItemAt(i);
            if (cbValue.equals(area)) {
                cbxRole.setSelectedIndex(i);
            }
        }
        btnDelete.setEnabled(true);
        btnInsert.setEnabled(true);
        btnUpdate.setEnabled(true);
        btnAddUserRoom.setEnabled(true);

    }//GEN-LAST:event_tblUserMouseClicked

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        // TODO add your handling code here:
        int r = JOptionPane.showConfirmDialog(this, "Are you sure to LogOut ?", "LogOut ?", JOptionPane.YES_NO_OPTION);
        if (r == JOptionPane.YES_OPTION) {
            new LoginForm().setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_btnLogOutActionPerformed

    private void btnDeviceInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeviceInsertActionPerformed
        if (lbwelcome.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "You Didn't Login Before. Please Login");
            return;
        }
        String deviceID = txtDeviceID.getText().trim();
        if (!deviceID.matches("[A-Za-z0-9 _]{1,50}")) {
            JOptionPane.showMessageDialog(this, "DeviceID must be required!");
            txtDeviceID.requestFocus();
            return;
        }
        try {
            if (deviceDAO.getDeviceByID(deviceID) != null) {
                JOptionPane.showMessageDialog(this, "DeviceID is Existed!");
                return;
            }
        } catch (Exception ex) {
            Logger.getLogger(AdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        String deviceName = txtDeviceName.getText().trim();
        if (deviceName.isEmpty()) {
            JOptionPane.showMessageDialog(null, "DeviceName can't be Blank !!!");
            return;
        }
        String roomid = (String) cbRoom.getSelectedItem();
        LocalDate date = java.time.LocalDate.now();
        Date daTe = Date.valueOf(date);

        String type = "";
        int selectionType = cbxType.getSelectedIndex();
        switch (selectionType) {
            case 1:
                type = "Lights";
                break;
            case 2:
                type = "Television";
                break;
            case 3:
                type = "PC";
                break;
            case 4:
                type = "Table";
                break;
            case 5:
                type = "Fan";
                break;
            case 6:
                type = "ELectric";
                break;
            case 7:
                type = "Air Condition";
                break;
            case 8:
                type = "Chair";
                break;
            case 9:
                type = "Fridge";
                break;

        }
        String des = txtDes.getText().trim();
        if (des.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Description can't be Blank !!!");
            return;
        }
        String quaratee = txtGuarantee.getText();
        if (!quaratee.matches("[A-Za-z0-9 _]{1,50}")) {
            JOptionPane.showMessageDialog(null, "Quaratee has Max Length 50 !!!");
            return;
        }

        DeviceDTO dto = new DeviceDTO(deviceID, deviceName, des, type, roomid, daTe, quaratee, 0, "Good");
        //add fixCount = 0
        int n = JOptionPane.showConfirmDialog(this, "Do you want to Insert new Device?", "Insert", JOptionPane.YES_NO_OPTION);
        if (n != JOptionPane.YES_OPTION) {
            return;
        }
        boolean check = false;
        try {
            check = deviceDAO.insertDevice(dto);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        if (check) {
            if (check) {
                JOptionPane.showMessageDialog(this, "Insert Device Success");
                txtDeviceID.setText("");
                txtDeviceName.setText("");
                txtDes.setText("");
                txtGuarantee.setText("");
                cbRoom.setSelectedIndex(0);
                cbxType.setSelectedIndex(0);
                try {
                    loadDevice();
                } catch (Exception ex) {
                    Logger.getLogger(AdminForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Insert Device Failed!");
            }
        }
    }//GEN-LAST:event_btnDeviceInsertActionPerformed

    private void btnDeviceUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeviceUpdateActionPerformed
        if (lbwelcome.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "You Didn't Login Before. Please Login");
            return;
        }
        String deviceID = txtDeviceID.getText().trim();
        if (!deviceID.matches("[A-Za-z0-9 _]{1,50}")) {
            JOptionPane.showMessageDialog(this, "DeviceID must be required!");
            txtDeviceID.requestFocus();
            return;
        }
        String deviceName = txtDeviceName.getText().trim();
        if (deviceName.isEmpty()) {
            JOptionPane.showMessageDialog(null, "DeviceName can't Blank!!!");
            return;
        }
        String roomid = (String) cbRoom.getSelectedItem();
        LocalDate date = java.time.LocalDate.now();
        Date daTe = Date.valueOf(date);

        String type = "";
        int selectionType = cbxType.getSelectedIndex();
        switch (selectionType) {
            case 1:
                type = "Lights";
                break;
            case 2:
                type = "Television";
                break;
            case 3:
                type = "PC";
                break;
            case 4:
                type = "Table";
                break;
            case 5:
                type = "Fan";
                break;
            case 6:
                type = "ELectric";
                break;
            case 7:
                type = "Air Condition";
                break;
            case 8:
                type = "Chair";
                break;
            case 9:
                type = "Fridge";
                break;
        }
        String des = txtDes.getText().trim();
        if (des.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Description can't Blank !!!");
            return;
        }
        String quaratee = txtGuarantee.getText();
        if (!quaratee.matches("[A-Za-z0-9 _]{1,50}")) {
            JOptionPane.showMessageDialog(null, "Quaratee has Max Length 50 !!!");
            return;
        }
        int n = JOptionPane.showConfirmDialog(this, "Do you want to update device-" + deviceID + "?", "Update", JOptionPane.YES_NO_OPTION);
        if (n != JOptionPane.YES_OPTION) {
            return;
        }
        DeviceDTO dto = new DeviceDTO(deviceID, deviceName, des, type, roomid, daTe, quaratee, 0, "good");
        boolean check = false;
        try {
            check = deviceDAO.update(dto);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        if (check) {
            if (check) {
                JOptionPane.showMessageDialog(this, "Update Device Success");
                clearDevice();
                try {
                    loadDevice();
                } catch (Exception ex) {
                    Logger.getLogger(AdminForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Update Device Failed");
            }
        }
    }//GEN-LAST:event_btnDeviceUpdateActionPerformed

    private void btnDeviceDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeviceDeleteActionPerformed
        if (lbwelcome.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "You Didn't Login Before. Please Login");
            return;
        }
        String deviceID = txtDeviceID.getText().trim();
        int n = JOptionPane.showConfirmDialog(this, "Do you want to delete device-" + deviceID + "?", "Delete", JOptionPane.YES_NO_OPTION);
        if (n != JOptionPane.YES_OPTION) {
            return;
        }
        boolean check = false;
        try {
            check = deviceDAO.delete(deviceID);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        if (check) {
            if (check) {
                JOptionPane.showMessageDialog(this, "Delete Device-" + deviceID + " Success");
                try {
                    loadDevice();
                } catch (Exception ex) {
                    Logger.getLogger(AdminForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Delete Device-" + deviceID + " failed!");
            }
        }
    }//GEN-LAST:event_btnDeviceDeleteActionPerformed

    private void btnDeviceNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeviceNewActionPerformed
        // TODO add your handling code here:
        txtDeviceID.setText("");
        txtDeviceName.setText("");
        txtDes.setText("");
        txtGuarantee.setText("");
        cbRoom.setSelectedIndex(0);
        cbxType.setSelectedIndex(0);

        try {
            loadDevice();
        } catch (Exception ex) {
            Logger.getLogger(AdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        btnDeviceDelete.setEnabled(false);
    }//GEN-LAST:event_btnDeviceNewActionPerformed

    private void tblStaffMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblStaffMouseClicked
        // TODO add your handling code here:
        int row = tblStaff.getSelectedRow();
        if (row < 0) {
            return;
        }
        String id = (String) tblStaff.getValueAt(row, 0);
        UserDTO dto = null;
        try {
            dto = userDAO.getUserByID(id);
        } catch (Exception ex) {
            Logger.getLogger(AdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        txtUserID.setText(dto.getId());
        txtUsername.setText(dto.getName());
        txtEmail.setText(dto.getEmail());
        txtPhone.setText(dto.getPhone());
        txtPassword.setText("*****");
        String area = dto.getRole();
        for (int i = 0; i < cbxRole.getItemCount(); i++) {
            String cbValue = (String) cbxRole.getItemAt(i);
            if (cbValue.equals(area)) {
                cbxRole.setSelectedIndex(i);
            }
        }
        btnDelete.setEnabled(true);
        btnInsert.setEnabled(true);
        btnUpdate.setEnabled(true);
    }//GEN-LAST:event_tblStaffMouseClicked

    private void txtUsernameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUsernameKeyPressed
        // TODO add your handling code here:
        if (!txtUsername.getText().isEmpty()) {
            btnTearchSearch.setEnabled(true);
        }
    }//GEN-LAST:event_txtUsernameKeyPressed

    private void tblAllMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAllMouseClicked
        // TODO add your handling code here:
        int row = tblAll.getSelectedRow();
        if (row < 0) {
            return;
        }
        String id = (String) tblAll.getValueAt(row, 0);
        UserDTO dto = null;
        try {
            dto = userDAO.getUserByID(id);
        } catch (Exception ex) {
            Logger.getLogger(AdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        txtUserID.setText(dto.getId());
        txtUsername.setText(dto.getName());
        txtEmail.setText(dto.getEmail());
        txtPhone.setText(dto.getPhone());
        txtPassword.setText("*****");
        String area = dto.getRole();
        for (int i = 0; i < cbxRole.getItemCount(); i++) {
            String cbValue = (String) cbxRole.getItemAt(i);
            if (cbValue.equals(area)) {
                cbxRole.setSelectedIndex(i);
            }
        }
        btnDelete.setEnabled(true);
        btnInsert.setEnabled(true);
        btnUpdate.setEnabled(true);
    }//GEN-LAST:event_tblAllMouseClicked

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        try {
//            setRoom();
        } catch (Exception ex) {

        }
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (lbwelcome.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "You Didn't Login Before. Please Login");
            return;
        }
        try {
            // TODO add your handling code here:
            new RoomForm().setVisible(true);
        } catch (Exception ex) {
            Logger.getLogger(AdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void btnAddUserRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddUserRoomActionPerformed
        // TODO add your handling code here:
        if (lbwelcome.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "You Didn't Login Before. Please Login");
            return;
        }
        RoomUserDAO dao = new RoomUserDAO();
        String userId = txtUSER.getText().trim();
        String roomid = (String) cbRoom1.getSelectedItem();
        try {
            if (dao.getUserByID(userId, roomid) != null) {
                JOptionPane.showMessageDialog(this, "UserID and RoomID Existed");
                return;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        int n = JOptionPane.showConfirmDialog(this, "Do you want to Insert new User in Room?", "Insert", JOptionPane.YES_NO_OPTION);
        if (n != JOptionPane.YES_OPTION) {
            return;
        }
        boolean check = false;
        try {
            check = dao.insertUserRoom(userId, roomid);
        } catch (Exception ex) {
            Logger.getLogger(AdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (check) {
            JOptionPane.showMessageDialog(this, "Insert Success");
            btnAddUserRoom.setEnabled(false);
        } else {
            JOptionPane.showMessageDialog(this, "Insert Failed!");
        }

    }//GEN-LAST:event_btnAddUserRoomActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (lbwelcome.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "You Didn't Login Before. Please Login");
            return;
        }
        try {
            // TODO add your handling code here:
            HistoryForm his = new HistoryForm();
            his.setVisible(true);
            his.setLocation(500, 300);
        } catch (Exception ex) {
            Logger.getLogger(AdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtUSERKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUSERKeyPressed
        // TODO add your handling code here:
        if (!txtUSER.getText().isEmpty()) {
            btnAddUserRoom.setEnabled(true);
        }
    }//GEN-LAST:event_txtUSERKeyPressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String from = txtFrom.getText().trim();
        String to = txtTo.getText().trim();
        List<DeviceDTO> listDevice = null;
        try {
            listDevice = deviceDAO.getDeviceFixMax(from, to);
        } catch (Exception ex) {
            Logger.getLogger(AdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        DefaultTableModel model = (DefaultTableModel) tblDevice.getModel();
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }
        for (DeviceDTO deviceDTO : listDevice) {
            model.addRow(deviceDTO.toVector());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddUserRoom;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeviceDelete;
    private javax.swing.JButton btnDeviceInsert;
    private javax.swing.JButton btnDeviceNew;
    private javax.swing.JButton btnDeviceUpdate;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnLogOut;
    private javax.swing.JButton btnTeacherNew;
    private javax.swing.JButton btnTearchSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cbRoom;
    private javax.swing.JComboBox<String> cbRoom1;
    private javax.swing.JComboBox cbxRole;
    private javax.swing.JComboBox cbxType;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lbwelcome;
    private javax.swing.JTable tblAll;
    private javax.swing.JTable tblDevice;
    private javax.swing.JTable tblStaff;
    private javax.swing.JTable tblUser;
    private javax.swing.JTextArea txtDes;
    private javax.swing.JTextField txtDeviceID;
    private javax.swing.JTextField txtDeviceName;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtGuarantee;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtTo;
    private javax.swing.JTextField txtUSER;
    private javax.swing.JTextField txtUserID;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
